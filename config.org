* Configure emacs access to MELPA
#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 24)
    (require 'package)
    (add-to-list
     'package-archives
     ;; '("melpa" . "http://stable.melpa.org/packages/") ; many packages won't show if using stable
     '("melpa" . "https://melpa.org/packages/")
     t))

  (defun ensure-package-installed (&rest packages)
    "Assure every package is installed, ask for installation if it’s not.

  Return a list of installed packages or nil for every skipped package."
    (mapcar
     (lambda (package)
       (if (package-installed-p package)
           nil
         (package-install package)))
     packages))

  ;; Make sure to have downloaded archive description.
  (or (file-exists-p package-user-dir)
      (package-refresh-contents))

  ;; Activate installed packages
  (package-initialize)
#+END_SRC

* Install necessary packages
#+BEGIN_SRC emacs-lisp
  (ensure-package-installed 
   'web-mode 
   'typescript-mode
   'magit
   'perspective
   'ag
   'company
   'company-tabnine
   'eglot
   'ace-jump-mode
   'expand-region
   'multiple-cursors
   )
#+END_SRC

* Add lisp folder to the emacs path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp")
#+END_SRC

* General settings
** Configure initial window and default window to be *scratch*
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
** Configure windows emacs to use LF line endings instead of CRLF
References:
- [[https://www.aleksandrhovhannisyan.com/blog/crlf-vs-lf-normalizing-line-endings-in-git/]]
- [[https://stackoverflow.com/questions/1674481/how-to-configure-gnu-emacs-to-write-unix-or-dos-formatted-files-by-default]]
#+BEGIN_SRC emacs-lisp
(setq-default buffer-file-coding-system 'utf-8-unix)
(setq-default default-buffer-file-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)
(set-language-environment "UTF-8")
#+END_SRC
** Disable emacs from creating backup files
It's less secure but a lot cleaner.
**TODO: Configure a folder outside .emacs.d to store backups.**

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq backup-by-copying t)
(setq create-lockfiles nil)
(setq auto-save-default nil)
#+END_SRC
** Display line numbers on modeline
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
(blink-cursor-mode 0)
(setq use-dialog-box nil)
#+END_SRC
** Disable bells on windows, annoying as hell
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC
** Keep emacs minimalist
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC
** Configure mark management emacs
**TODO: Discover why I'm configuring this**

#+BEGIN_SRC emacs-lisp
(setq set-mark-command-repeat-pop t)
(setq mark-ring-max 5)
(setq global-mark-ring-max 5)
#+END_SRC
** Enable line numbers with relative styling
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers 'relative)
(when (version<= "26.0.50" emacs-version)
  (global-display-line-numbers-mode))
#+END_SRC
** Remember cursor position
#+BEGIN_SRC emacs-lisp
(if (version< emacs-version "25.0")
    (progn
      (require 'saveplace)
      (setq-default save-place t))
  (save-place-mode 1))
#+END_SRC
** Make typing delete/overwrites selected text
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
** Disable S-<arrow_keys> binding
#+BEGIN_SRC emacs-lisp
(setq shift-select-mode nil)
#+END_SRC
** Enable auto pairs
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC
** Set highlighting brackets
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-style 'parenthesis)
#+END_SRC
** For isearch-forward, make these equivalent: space newline tab hyphen underscore
#+BEGIN_SRC emacs-lisp
(setq search-whitespace-regexp "[-_ \t\n]+")
#+END_SRC
** Bug of pasting in emacs
References
- [[http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16737#17]]
- [[http://xahlee.info/emacs/misc/emacs_bug_cant_paste_2015.html]]

#+BEGIN_SRC emacs-lisp
;; (setq x-selection-timeout 300)
(setq save-interprogram-paste-before-kill t)
(setq x-select-enable-clipboard-manager nil)
#+END_SRC
** Indentation
**TODO: Improve this**
#+BEGIN_SRC emacs-lisp
(electric-indent-mode 0)
(set-default 'tab-always-indent 'complete)

;; no mixed tab space
(setq-default indent-tabs-mode nil)
 ; gnu emacs 23.1, 24.4.1 default is t

;; 4 is more popular than 8.
(setq-default tab-width 4)

(setq sentence-end-double-space nil )
#+END_SRC
** Use y-n instead of yes-no
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Configure file templates for newly created files
#+BEGIN_SRC emacs-lisp
(setq auto-insert-directory "~/.emacs.d/templates/")
(add-hook 'find-file-hook 'auto-insert)
(define-auto-insert "\.el" "emacs-lisp-lib.el")
#+END_SRC
* Appearance
** Load theme
#+BEGIN_SRC emacs-lisp
(load-theme 'modus-vivendi)
#+END_SRC
** Define default font size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 140)
#+END_SRC
** Minibuffer enhancements
#+BEGIN_SRC emacs-lisp
(progn
  ;; minibuffer setup
  (setq enable-recursive-minibuffers t)
  (savehist-mode 1)
  ;; big minibuffer height, for ido to show choices vertically
  (setq max-mini-window-height 0.5)
  ;; minibuffer, stop cursor going into prompt
  (customize-set-variable
   'minibuffer-prompt-properties
   (quote (read-only t cursor-intangible t face minibuffer-prompt))))

(progn
  ;; minibuffer enhanced completion
  (require 'icomplete)
  (icomplete-mode 1)
  ;; show choices vertically
  (setq icomplete-separator "\n")
  (setq icomplete-hide-common-prefix nil)
  (setq icomplete-in-buffer t)
  (define-key icomplete-minibuffer-map (kbd "C-f") 'icomplete-forward-completions)
  (define-key icomplete-minibuffer-map (kbd "C-b") 'icomplete-backward-completions))
#+END_SRC
** No more ivy! let's use default emacs fido-mode
Make buffer switch command do suggestions, also for find-file command

#+BEGIN_SRC emacs-lisp
(fido-vertical-mode 1)
#+END_SRC

* Keybindings
** Change font size zooming
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC
** Load keybindings library configuration
This is actually temporary, I plan to move all the keybindings definitions to subheadings, so I can disable it easier.
#+BEGIN_SRC emacs-lisp
(require 'keybindings)
#+END_SRC

* Packages
** Dired
*** Require dired
#+BEGIN_SRC emacs-lisp
(require 'dired)
#+END_SRC
*** Configure Dired-X
**TODO: Discover why I'm configuring this**

#+BEGIN_SRC emacs-lisp
(progn
  (require 'dired-x)
  (setq dired-dwim-target t)
  (setq dired-recursive-copies 'top)
  (setq dired-recursive-deletes 'top))
#+END_SRC
** Org mode
*** Require org
#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

*** Defining common binding to create code blocks
On org mode it's important to create a lot of code blocks to keep our configuration separated and with proper documentation.

#+BEGIN_SRC emacs-lisp
  (defun insert-code-block ()
    (interactive)
    (insert "#+BEGIN_SRC emacs-lisp")
    (newline)
    (insert "#+END_SRC")
    (previous-line)
    (end-of-line)
    (newline))

  (define-key org-mode-map (kbd "C-c C-b") 'insert-code-block)
#+END_SRC

*** Make org-mode syntax color code sections
#+BEGIN_SRC emacs-lisp
(progn
  ;; org-mode
  ;; make “org-mode” syntax color code sections
  (setq org-src-fontify-natively t)
  (setq org-startup-folded nil)
  (setq org-return-follows-link t)
  (setq org-startup-truncated nil))
#+END_SRC
** Load libraries and configure packages
#+BEGIN_SRC emacs-lisp
(require 'ts-js-config)
(require 'magit-config)
(require 'perspectives)
(require 'dired-config)
(require 'isearch-config)
(require 'ibuffer-config)
(require 'company-config)
(setq projects (delete ".." (delete "." (directory-files "D:\\git"))))
(setq projectPrefix "D:\\git")
(require 'switch-project)
;; (require 'eglot-config)
#+END_SRC
** Ace jump mode
Easymotion like package for emacs
#+BEGIN_SRC emacs-lisp
(require 'ace-jump-mode)
(global-set-key (kbd "C-c SPC") 'ace-jump-mode)
#+END_SRC
** Expand region
Expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want.

#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC
** Iy go to char
This package defines the function iy-go-to-char which behaves like "f" in vim, and iy-go-up-to-char like "t" in vim. It reads a char and go the next Nth occurence of the char. User can continue such search using that char key.


To make iy-go-to-char works better with multiple-cursors, add iy-go-to-char-start-pos to mc/cursor-specific-vars when mc is loaded:
#+BEGIN_SRC emacs-lisp
(require 'iy-go-to-char)
(add-to-list 'mc/cursor-specific-vars 'iy-go-to-char-start-pos)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c f") 'iy-go-to-char)
(global-set-key (kbd "C-c F") 'iy-go-to-char-backward)
(global-set-key (kbd "C-c ;") 'iy-go-to-or-up-to-continue)
(global-set-key (kbd "C-c ,") 'iy-go-to-or-up-to-continue-backward)
#+END_SRC
